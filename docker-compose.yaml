version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: supply-chain-postgres
    environment:
      POSTGRES_DB: supply_chain_ml
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./data/schemas:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL UI
  pgadmin:
    image: dpage/pgadmin4
    container_name: supply-chain-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: supply-chain-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RedisInsight for Redis UI
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: supply-chain-redis-insight
    ports:
      - "8001:8001"
    depends_on:
      - redis

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5
    container_name: supply-chain-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: supply-chain-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: supply-chain-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ML Model Server (Python)
  model-server:
    build:
      context: .
      dockerfile: python/Dockerfile
    container_name: supply-chain-model-server
    depends_on:
      - postgres
      - redis
      - neo4j
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/supply_chain_ml
      - REDIS_URL=redis://redis:6379
      - NEO4J_URL=bolt://neo4j:7687
    ports:
      - "8001:8001"
    volumes:
      - ./python:/app
      - model_artifacts:/app/models
    command: uvicorn inference.server:app --host 0.0.0.0 --port 8001

  # API Server (Go)
  api-server:
    build:
      context: .
      dockerfile: cmd/api-server/Dockerfile
    container_name: supply-chain-api-server
    depends_on:
      - postgres
      - redis
      - neo4j
      - kafka
      - model-server
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    ports:
      - "8080:8080"
    volumes:
      - ./configs:/app/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Pipeline (Go) - Available processor
  data-pipeline:
    build:
      context: .
      dockerfile: cmd/data-pipeline/Dockerfile
    container_name: supply-chain-data-pipeline
    depends_on:
      - postgres
      - redis
      - neo4j
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ./configs:/app/configs
      - ./data:/app/data

  # Frontend (React)
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: supply-chain-frontend
    depends_on:
      - api-server
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    volumes:
      - ./web:/app
      - /app/node_modules

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: supply-chain-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: supply-chain-grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  zookeeper_data:
  kafka_data:
  model_artifacts:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: supply-chain-network
